
fn main @public
  case "info" :: Paths:
    Result = lists.map(Paths) <<- case Path:
      handle_file(Path)
    end

    print_and_exit(Result)
  case "search" :: Query :: Paths:
    match compile_ast_query(Query):
      case ok, ModName, BinMod, Warnings:
        print_warnings(Warnings)
        (module, QMod) = erlang.load_module(ModName, BinMod)

        for Pattern in Paths:
          for Path in filelib.wildcard(Pattern):
            search_path(Path, QMod)
          end
        end

        erlang.halt(0)
      case error, Errors, Warnings:
        print_warnings(Warnings)
        print_errors(Errors)
        erlang.halt(0)
      case Error:
        io.format("Error: ~p~n", [Error])
        erlang.halt(0)
    end
  case "count-atoms" :: Paths:
    StateOut = lists.foldl({}, Paths) <<- case Path, StateIn:
      count_atoms(Path, StateIn)
    end

    format_atom_count(StateOut)
  case Args:
    io.format("Unknown Arguments: ~p~n", [Args])
    usage()
    erlang.halt(0)
end

fn usage case:
  io.format("USAGE: erlplorer info <file>+~n")
  io.format("       erlplorer search <erl-expr> <file>+~n")
end

fn print_warnings
case []:
    ok
case Warnings:
  io.format("~nWarnings: ~n~p~n", [Warnings])
end

fn print_errors case Errors:
  io.format("~nErrors: ~n~p~n", [Errors])
end

fn compile_ast_query case Code:
  ModCode = "dummy() -> " ++ Code ++ ".\n"
  match erl_scan.string(ModCode):
    case ok, Tokens, _EndLocation:
      (ok, Ast) = erl_parse.parse_form(Tokens)
      (ok, QueryAst) = extract_query_ast(Ast)
      AbsQueryAst = abstract_query_ast(QueryAst)
      Id = erlang.unique_integer([positive])
      ModName = list_to_atom("erlplorer_query_mod_" ++ integer_to_list(Id))
      QModAst = query_ast_to_mod(AbsQueryAst, ModName)
      #_ io.format("ast: ~p~n", [QModAst])
      #_ io.format("code:~n~s~n", [pp_mod_ast(QModAst)])
      compile.forms(QModAst, [return, binary])
    case error, ErrorInfo, _ErrorLocation:
      (error, ErrorInfo, [])
  end
end

fn pp_mod_ast case ModAst:
  erl_prettypr.format(erl_syntax.form_list(ModAst))
end

fn query_match @public case {filename=Filename}, Ast:
  Line = element(2, Ast)
  io.format("~s:~p ~s~n", [Filename, Line, try_pp_ast(Ast)])
end

fn try_pp_ast case Ast:
  try
    erl_pp.expr(Ast)
  catch case _, _:
    try
      erl_pp.form(Ast)
    catch case _, _:
      ""
    end
  end
end

fn query_ast_to_mod case Ast, ModName:
 [(attribute, 1, file, (atom_to_list(ModName), 1)), 
  (attribute, 1, module, ModName), 
  (attribute, 2, export, [(walk, 2)]), 

  (function, 4, walk, 2, 
    [(clause, 4, 
      [(var, 4, `erlplorer_State`), 
        (`match`, 4, (var, 4, `erlplorer_Node`), Ast)], 
      [], 
      [(call, 5, 
        (remote, 5, (atom, 5, erlplorer), (atom, 5, query_match)), 
         [(var, 5, `erlplorer_State`), (var, 5, `erlplorer_Node`)]), 

        (tuple, 6, [(var, 6, `erlplorer_Node`), (var, 6, `erlplorer_State`)])]), 
     (clause, 7, 
       [(var, 7, `erlplorer_State`), (var, 7, `erlplorer_Node`)], 
       [], 
       [(tuple, 8, [(var, 8, `erlplorer_Node`), (var, 8, `erlplorer_State`)])])]), 
 (eof, 9)] 
end

fn extract_query_ast
case (function, _Line, dummy, _Arity=0,
        [(clause, _CLine, _Args, _Guards, [Body])]):
  (ok, Body)
end

fn fun_match_any_line_ast case _A, _E: (var, 99, `_`) end

fn abstract_query_ast_lines
case State, Node=(var, _Line, Name):
  match atom_to_list(Name):
    case "_@" ++ _:
      #_ "if name starts with _@ then we leave it as a var to pattern match"
      #_ "create an 'identity' function to avoid abstract from abstracting it" 
      NewNode = fn case _A, _E: Node end
      (NewNode, State)
    else:
      #_ "replace vars for funs that will be called by abstract"
      NewNode = fn case _A, _E:
        Line = 0
        (tuple, Line, [(atom, Line, var), (var, 99, `_`), (atom, Line, Name)])
      end
      (NewNode, State)
  end
case State, Node when is_integer(element(2, Node)):
  #_ "put a function in the second element of the tuple"
  #_ "so abstract calls it to get the right node"
  NewNode = setelement(2, Node, fn fun_match_any_line_ast:2) 
  (NewNode, State)
end

fn abstract_query_ast case Ast:
  State0 = {}
  Walker = fn abstract_query_ast_lines:2
  (AbsAstLines, _State) = ast_walk.expr(Ast, Walker, State0)
  erlplorer_util.abstract(AbsAstLines)
end

fn search_path case Path, QMod:
  match parse_file(Path):
    case ok, Ast:
      State0 = {}
      Walker = fn QMod.walk:2
      ast_walk.walk(Ast, Walker, State0)
    case error, Reason:
      io.format("Error parsing ~s: ~p", [Path, Reason])
  end
end

fn walk_count_atoms
case State, Ast = (atom, _Anno, Atom):
  (Ast, maps.update_with(Atom, fn case V: V + 1 end, 1, State))
case State, Ast:
  (Ast, State)
end

fn count_atoms case Path, StateIn:
  match parse_file(Path):
    case ok, Ast:
      Walker = fn walk_count_atoms:2
      (_, State1) = ast_walk.walk(Ast, Walker, StateIn)
      State1
    case error, Reason:
      io.format("Error parsing ~s: ~p", [Path, Reason])
      StateIn
  end
end

fn format_atom_count case State:
  AtomList0 = maps.to_list(State)
  AtomListSorted = lists.sort(fn case (_, A), (_, B): A <= B end, AtomList0)
  for (Atom, Count) in AtomListSorted:
    io.format("~p: ~p~n", [Atom, Count])
  end
end

fn parse_file case Path:
  match lists.reverse(Path):
    case "lre." ++ _:
      epp.parse_file(Path, [], [])
    case "nf." ++ _:
      efene.to_mod(Path)
    else:
      (error, (invalid_file, Path))
  end
end

fn fun_part_to_name
  case (atom, _, Name): atom_to_list(Name)
  case (var, _, _Name): "_"
  case (call, _, _, _): "_"
  case (record_field, _Line, _Var, Name, (atom, _, Field)):
    io_lib.format("#~p.~p", [Name, Field])
end

fn fun_to_name case Mod, Fun, Args:
  ModName = fun_part_to_name(Mod)
  FunName = fun_part_to_name(Fun)
  Arity = length(Args)
  list_to_binary(io_lib.format("~s:~s/~p", [ModName, FunName, Arity]))
end

fn analyze_path @public case Path:
  match parse_file(Path):
    case ok, Ast:
      Walker = fn
        case State, Node=(call, _Line, (remote, _La, Mod, Fun), Args):
          MFA = fun_to_name(Mod, Fun, Args)
          State1 = inc(State, external_funs, MFA)
          match Mod:
            case (atom, _, ModName):
              (Node, inc(State1, modules, ModName))
            else:
              (Node, State1)
          end
        case State={functions=Funs}, Node=(function, Line, Name, Arity, Clauses):
          (clause, _, _, _, Forms) = lists.last(Clauses)
          LastForm = lists.last(Forms)
          LastLine = element(2, LastForm)
          ClausesInfo = analyze_clauses(Node)
          Info = maps.merge({line: Line,
                             name: Name,
                             length: LastLine - Line + 1,
                             arity: Arity,
                             clauses: length(Clauses)},
                            ClausesInfo)
          FunA = io_lib.format("~s/~p", [Name, Arity]) -> list_to_binary()
          Funs1 = maps.put(FunA, Info, Funs)
          State1 = maps.put(functions, Funs1, State)
          (Node, State1)
        case State, Node:
          (Node, State)
      end

      State0 = {modules: {}, external_funs: {}, functions: {}}
      (_, Stats) = ast_walk.walk(Ast, Walker, State0)

      (ok, Stats)
    case error, Reason:
      (error, {reason: (io_lib.format("~p", [Reason]) -> list_to_binary())})
  end
end

fn add_item_line case Key, Map, Name, Line:
  Items = maps.get(Key, Map, {})
  Lines = maps.get(Name, Items, [])
  NewLines = Line :: Lines
  NewItems = maps.put(Name, NewLines, Items)
  maps.put(Key, NewItems, Map)
end

fn analyze_clauses case Ast:
  Walker = fn
    case State, Node=(var, Line, Name):
      State1 = add_item_line(vars, State, Name, Line)
      (Node, State1)
    case State, Node=(call, Line, (remote, _La, Mod, Fun), Args):
      Name = fun_to_name(Mod, Fun, Args)
      State1 = add_item_line(remote_calls, State, Name, Line)
      (Node, State1)
    case State, Node=(call, Line, (atom, _La, Fun), Args):
      Arity = length(Args)
      Name = list_to_binary(io_lib.format("~p/~p", [Fun, Arity]))
      State1 = add_item_line(calls, State, Name, Line)
      (Node, State1)

    case State, Node=(record_index, Line, Name, _Field):
      State1 = add_item_line(records, State, Name, Line)
      (Node, State1)
    case State, Node=(record_field, Line, _Rec, Name, _Field):
      State1 = add_item_line(records, State, Name, Line)
      (Node, State1)
    case State, Node=(record, Line, Name, _Inits):
      State1 = add_item_line(records, State, Name, Line)
      (Node, State1)

    case State, Node=(`if`, _Line, Clauses):
      (Node, inc_key(State, inner_clauses, length(Clauses)))
    case State, Node=(`case`, _Line, _Expr, Clauses):
      (Node, inc_key(State, inner_clauses, length(Clauses)))
    case State, Node=(`receive`, _Line, Clauses):
      (Node, inc_key(State, inner_clauses, length(Clauses)))
    case State, Node=(`receive`, _Line, _Cs, _To, Clauses):
      (Node, inc_key(State, inner_clauses, length(Clauses)))
    case State, Node=(`fun`, _Line, (clauses, Clauses)):
      (Node, inc_key(State, inner_clauses, length(Clauses)))
    case State, Node=(named_fun, _Line, _Name, Clauses):
      (Node, inc_key(State, inner_clauses, length(Clauses)))
    case State, Node=(`try`, _Line, _Es, Scs, Ccs, _As):
      (Node, inc_key(State, inner_clauses, length(Scs) + length(Ccs)))

    case State, Node:
      (Node, State)
  end

  State0 = {vars: {}, remote_calls: {}, calls: {}, records: {},
            inner_clauses: 0}
  (_, Stats) = ast_walk.walk([Ast], Walker, State0)

  Stats
end

fn inc_key case Map, Key, Value:
  CurrentCount = maps.get(Key, Map, 0)
  maps.put(Key, CurrentCount + Value, Map)
end

fn inc case Map, Key, SubKey:
  M1 = maps.get(Key, Map, {})
  CurrentCount = maps.get(SubKey, M1, 0)
  M2 = maps.put(SubKey, CurrentCount + 1, M1)
  maps.put(Key, M2, Map)
end

fn print_and_exit case Data:
  Out = jsx.encode(Data)
  io.format("~s~n", [Out])
  erlang.halt(0)
end

fn handle_file case Path:
  ModuleName = remove_extension(filename.basename(Path)) -> list_to_binary()
  match analyze_path(Path):
    case ok, Result:
       {status: ok, module: ModuleName, data: Result}
    case error, Reason:
       {status: error, reason: Reason, module: ModuleName}
  end
end

fn remove_extension case Name:
  match lists.reverse(Name):
    case "lre." ++ Name1:
      lists.reverse(Name1)
    case "nf." ++ Name1:
      lists.reverse(Name1)
    else:
      Name
  end
end
